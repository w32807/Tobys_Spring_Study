<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <bean id="userDao" class="com.toby.spring.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="userService" class="com.toby.spring.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <!-- <property name="mailSender" ref="mailSender"/> -->
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="mail.server.com"/>
    </bean>
    <!-- MySQL은 구체적으로 서버 시간대를 정해줘야 한다. -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/tobySpring?serverTimezone=Asia/Seoul"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>
    
    <bean id="message" class="com.toby.spring.beans.MessageFactoryBean">
        <property name="text" value="Factory Bean"/>
    </bean>
    
    <!-- transaction advice를 bean으로 등록 -->
    <bean id="transactionAdvice" class="com.toby.spring.service.TransactionAdvice">
        <property name="transactionManager" value="transactionManager"/>
    </bean>
    
    <!-- spring에서 제공하는 class를 구현하여 pointcut 생성 -->
    <!-- <bean id="transactionPointcut" class="com.toby.spring.proxy.NameMatchClassMethodPointcut">
        <property name="mappedClassName" value="ServiceImpl*"/>
        <property name="mappedName" value="upgrade*"/>
    </bean> -->
    <!-- org.springframework.aop.aspectj.AspectJExpressionPointcut으로 포인트 컷 (어드바이스를 적용할 대상을 고르는 모듈) 을 정한다 -->
    <!-- <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
        <property name="expression" value="execution(* *..*ServicecImpl.upgrade*(..))"/>
     </bean> -->
    
    <!-- 원하는 advisor를 생성 후, Bean으로써 pointcut을 넣어줌 -->
<!--     <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="pointcut" value="transactionPointcut"/>
        <property name="advice" value="transactionAdvice"/>
    </bean> -->
    
    
    <!-- <bean id="userService" class="com.toby.spring.service.UserServiceTx">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="userService" ref="userServiceImpl"/>
    </bean> -->
    <!-- 트랜잭션을 적용한 userService DefaultAdvisorAutoProxyCreator를 사용하면서 필요 없어졌다 -->
<!--     <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" value="userServiceImpl"/>
        <property name="interceptorNames">
            <list>
                <value>transactionAdvisor</value> 여러개의 어드바이저를 list 형식으로 등록해줌
            </list>
        </property>
        <property name="pointcut" value="transactionPointcut"/>
        <property name="advice" value="transactionAdvice"/>
    </bean> -->
    
    <!-- 등록된 빈 중에서 advisor 인터페이스를 구현한 빈을 모두 찾아서, 프록시 선정 대상 bean의 오브젝트를 프록시로 바꿔치기 하는 빈이다. -->
    <!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/> -->
    <!-- advice만 bean으로 선언 후, DefaultAdvisorAutoProxyCreator, pointcut, advisor를 aop namespace를 이용하여 한번에 처리  -->
    <!-- <aop:config>
        <aop:pointcut expression="execution(* *..*ServicecImpl.upgrade*(..))" id="transactionPointcut"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
    </aop:config> -->
    <!-- 만약 한개의 포인트 컷을 여러곳에 사용해야 한다면 따로 선언해야 하지만 아니라면 내장 포인트 컷을 사용해도 된다 -->
    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServicecImpl.upgrade*(..))"/>
    </aop:config>
</beans>


